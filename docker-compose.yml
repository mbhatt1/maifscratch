version: '3.8'

services:
  maif:
    build:
      context: .
      dockerfile: Dockerfile
    image: maif:latest
    container_name: maif-service
    ports:
      - "8080:8080"
    environment:
      - MAIF_ENVIRONMENT=production
      - MAIF_LOG_LEVEL=INFO
      - AWS_DEFAULT_REGION=${AWS_DEFAULT_REGION:-us-east-1}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
      - MAIF_S3_BUCKET=${MAIF_S3_BUCKET:-maif-artifacts}
      - MAIF_DYNAMODB_TABLE=${MAIF_DYNAMODB_TABLE:-maif-metadata}
      - MAIF_KMS_KEY_ID=${MAIF_KMS_KEY_ID}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - maif-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  localstack:
    image: localstack/localstack:latest
    container_name: maif-localstack
    ports:
      - "4566:4566"
      - "4571:4571"
    environment:
      - SERVICES=s3,dynamodb,kms,lambda,stepfunctions,kinesis,cloudwatch
      - DEBUG=0
      - DATA_DIR=/tmp/localstack/data
      - LAMBDA_EXECUTOR=docker
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - ./localstack:/tmp/localstack
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - maif-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4566/_localstack/health"]
      interval: 10s
      timeout: 5s
      retries: 5

  prometheus:
    image: prom/prometheus:latest
    container_name: maif-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - maif-network
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: maif-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - maif-network
    restart: unless-stopped

networks:
  maif-network:
    driver: bridge

volumes:
  prometheus-data:
  grafana-data: